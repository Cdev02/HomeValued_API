name: HomeValued_API_to_test

on:
  pull_request:
    branches: [ "test_env" ]
permissions:
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PGSQL_HOST: ${{secrets.PGSQL_HOST}}
      PGSQL_USER: ${{secrets.PGSQL_USER}}
      PGSQL_PASSWORD: ${{secrets.PGSQL_PASSWORD}}
      PGSQL_DATABASE: ${{secrets.PGSQL_DATABASE}}
      PGSQL_TABLENAME: ${{secrets.PGSQL_TABLENAME}}
      POSTGRES_DB: ${{secrets.POSTGRES_DB}}
      POSTGRES_USER: ${{secrets.POSTGRES_USER}}
      POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
      POSTGRES_ROOT_PASSWORD: ${{secrets.POSTGRES_ROOT_PASSWORD}}
      POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
      ECR_REGISTRY: ${{secrets.ECR_REGISTRY}}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11.3
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Test with pytest
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        pip install pytest
        pytest 

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push
      run: | 
        echo ---Building images and starting up docker---
        docker-compose -f docker-compose.yaml up -d
        echo ---Containers upâ€”
        docker-compose push api

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, Tag and Push the image to AWS ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{secrets.ECR_REGISTRY}}
        ECR_REPOSITORY: test_env_homevalued
        IMAGE_TAG: latest
      run: |
        docker-compose -f docker-compose.yaml up --no-start &&
        docker tag carlosdan2/homevalued_api_api_1:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker-compose push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


    
    
